<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on KMS Dev log</title>
    <link>https://thouy.github.io/posts/golang/</link>
    <description>Recent content in Golang on KMS Dev log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 18 Jan 2023 17:00:16 +0900</lastBuildDate><atom:link href="https://thouy.github.io/posts/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Golang] Goroutine VS Thread</title>
      <link>https://thouy.github.io/posts/golang/goroutine_versus_thread/</link>
      <pubDate>Wed, 18 Jan 2023 17:00:16 +0900</pubDate>
      
      <guid>https://thouy.github.io/posts/golang/goroutine_versus_thread/</guid>
      <description>
        
          
            고루틴(Goroutine)은 Go 런타임이 관리하는 경량쓰레드입니다. 이번 포스팅에서는 OS 레벨의 쓰레드와 고루틴이 어떠한 차이가 있는지 살펴보고자 합니다.
[OS] 스레드(Thread)
메모리 점유 측면 고루틴은 생성 시 약 2KB의 스택 메모리 공간을 소모합니다. 필요에 따라 힙 메모리를 사용하기도 합니다. 쓰레드는 쓰레드가 사용할 메모리 공간과 더불어 Guard Page로 불리는 쓰레드와 쓰레드 사이의 메모리 공간까지 포함하기 때문에 약 1MB의 메모리 공간을 소모합니다. 때문에 쓰레드를 생성하면 할수록 가용 힙 메모리 공간이 계속 줄어드는 문제점이 있습니다. 생성 및 소거 비용 측면 고루틴은 Go 런타임이 논리적으로 생성하고 소거되므로 생성/소거에 드는 비용이 저렴합니다.
          
          
        
      </description>
    </item>
    
    <item>
      <title>[Golang] Goroutine &amp; Channel</title>
      <link>https://thouy.github.io/posts/golang/goroutine_and_channel/</link>
      <pubDate>Wed, 18 Jan 2023 16:58:59 +0900</pubDate>
      
      <guid>https://thouy.github.io/posts/golang/goroutine_and_channel/</guid>
      <description>
        
          
            Goroutine(고루틴) 고루틴은 Go 런타임이 관리하는 가상쓰레드 입니다. Go에서 go 키워드를 사용하여 함수를 호출하면, Go는 런타임시에 새로운 고루틴을 생성합니다. 고루틴은 비동기적으로 함수를 실행하므로, 여러 함수를 동시에 실행하고자 할 때 사용됩니다. 고루틴은 OS의 쓰레드보다 더 가볍게 비동기 동시처리를 구현하기 위해 만들어 졌습니다. 때문에 고루틴은 OS의 쓰레드와 1:1로 대응되지 않고 훨씬 적은 OS의 쓰레드를 사용합니다. Go 런타임이 실행하는 모든 프로그램은 고루틴을 기반으로 동작합니다. main 함수도 고루틴으로 실행됩니다. 때문에 모든 Go 프로그램은 적어도 하나의 (메인)고루틴을 포함합니다.
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
